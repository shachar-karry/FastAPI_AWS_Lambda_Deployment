name: FastAPI CI/CD

on:
  # Trigger the workflow on push
  push:
    branches: 
      # Push events on main branch
      - main 

# The Job defines a series of steps that execute on the same runner.
jobs:

  CI:
    # Define the runner used in the workflow
    runs-on: ubuntu-latest
    environment:
      name: AWS_Deployment_Env
    steps:   
      # Check out repo so our workflow can access it
      - uses: actions/checkout@v3
      
      # Step-1 Setup Python
      - name: Set up Python
        # This action sets up a Python environment for use in actions
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          # optional: architecture: x64 x64 or x86. Defaults to x64 if not specified

      # Step-2 Install Python Virtual ENV
#      - name: Install Python Virtual ENV
#        run: pip3 install virtualenv

      # Step-3 Setup Virtual ENV
      # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
      - name:  Virtual ENV
        uses: actions/cache@v3
        id: cache-venv # name for referring later
        with:
          path: venv # what we cache: the Virtual ENV
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      # Step-4 Build a Virtual ENV, but only if it doesn't already exist
      - name: Activate Virtual ENV
        run: python -m venv venv && source venv/bin/activate && pip3 install -r requirements_lambda.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Run Tests
        # Note that you have to activate the virtualenv in every step
        # because GitHub actions doesn't preserve the environment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_RDS_SECRET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_RDS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          POSTGRESQL_CONNECTION_STR: ${{ secrets.POSTGRESQL_CONNECTION_STR }}
        run: . venv/bin/activate && pytest
      - name: Create archive of dependencies
        # We exclude unnecessary packages to save space (hard limited to 250MB) using -x
        run: |
          cd ./venv/lib/python3.9/site-packages
          zip -r9 ../../../../api.zip . -x ./pip/**\* ./setuptools/**\*
      - name: Add API files to Zip file
        run: |
          zip -g api.zip -r utils/
          cd ./api && zip -g ../api.zip -r .
      - name: Check zip size
        run: unzip -l api.zip | tail -2
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v3
        with:
          name: api
          path: api.zip

  CD:
    runs-on: ubuntu-latest
    environment:
      name: AWS_Deployment_Env
    needs: [CI]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v3
        with:
          name: api
      - name: Upload to S3
        run: aws s3 cp api.zip s3://karry-fastapi-sandbox/api.zip
#      - name: Deploy new Lambda 1
#        run: aws lambda update-function-code --function-name fastapi-sandbox-1 --s3-bucket karry-fastapi-sandbox --s3-key api.zip
      - name: Deploy new Lambda 2
        run: aws lambda update-function-code --function-name fastapi-sandbox-2 --s3-bucket karry-fastapi-sandbox --s3-key api.zip
#      - name: Test URL
#        uses: maxkomarychev/octions/octions/http/get@v0.0.3
#        id: response
#        with:
#          url: "https://662nrjrc97.execute-api.us-east-2.amazonaws.com/v1/health"
      - name: Test API health
        id: health
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://662nrjrc97.execute-api.us-east-2.amazonaws.com/v1/health"
          method: 'GET'
          retry: 2
      - name: Show Response
        run: |
          echo ${{ steps.health.outputs.response }}
          echo ${{ steps.health.outputs.headers }}
          echo ${{ fromJson(steps.health.outputs.response).message }}
#      - name: Check status code
#        run: |
#          if [ "${{ steps.health.outputs.status_code }}" != "200" ]; then
#            echo "Error: Expected status code 200, but got ${{ steps.health.outputs.status_code }}";
#            exit 1;
#          fi
      - name: Check response body
        run: |
          if [ "${{ steps.health.outputs.response }}" != "{"message":"healthy"}" ]; then
            echo "Error: Unexpected response body";
            exit 1;
          fi
